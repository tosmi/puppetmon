#!/bin/env ruby

require 'logger'

$logger       = Logger.new(STDOUT)
$logger.level = Logger::DEBUG

# maximum age of the agent lock file in seconds
$MAX_AGE = 43200

module PuppetMonitor

  class BasePuppetMonitor
    attr_reader :state_dir, :agent_lock

    def initialize()
      @state_dir  = '/var/lib/puppet/state'
      @state_dir  = ENV['PUPPETAGENT_STATE_DIR'] if ENV['PUPPETAGENT_STATE_DIR']
      @agent_lock = File.join(@state_dir, 'agent_catalog_run.lock')
    end

    def restart
      raise NotImplementedError
    end

    def lock_older_than?(age)
      $logger.debug("check if #{@agent_lock} is older than #{age}")
      if File.exists?(@agent_lock)
        lastmodified = File.stat(@agent_lock).mtime
        if Time.now - lastmodified > age
          $logger.debug("#{@agent_lock} is older than #{age}")
          return true
        end
      end

      return false
    end

    def kill_stale_agent
      pid = get_agent_pid
      $logger.debug("killing stale agent with pid #{pid}")
      Process.kill('TERM', pid)
    end

    def get_agent_pid
      if File.exists?(@agent_lock)
        pid = File.open(@agent_lock).read
        pid.chomp.to_i
      end
    end

  end

  class SunOS < BasePuppetMonitor
    def restart
      `/usr/sbin/svcadm restart puppet`
    end
  end

  class AIX < BasePuppetMonitor
    def restart
      `/etc/rc.d/init.d/puppet restart`
    end
  end

  class Linux < BasePuppetMonitor
    def restart
      `/sbin/service puppet restart`
    end
  end
end

class GetAMonitor
  def initialize()
    case `uname -s`.chomp()
    when 'Linux'
      @monimp = PuppetMonitor::Linux.new

    when 'SunOS'
      @monimp = PuppetMonitor::SunOS.new

    when 'AIX'
      @monimp = PuppetMonitor::AIX.new
    end
  end

  def method_missing(meth, *args, &block)
    @monimp.send(meth.to_sym, *args, &block)
  end
edn


mon = GetAMonitor.new
if mon.lock_older_than?($MAX_AGE)
  $logger.debug("going restart the puppet agent")
  mon.kill_stale_agent
  mon.restart
end
